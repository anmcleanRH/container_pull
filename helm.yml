---


- hosts: localhost
  name: mirror helm binaries repos and dependencies
  vars: 
    helm_dir: /var/lib/import/helm/
    export_dir: /var/lib/export/
    cache_dir: "{{helm_dir}}/cache"
    pkg_dir: "{{helm_dir}}/pkgs"
    bin_dir: /var/lib/import/bin
    helm_exe: "{{bin_dir}}/linux-amd64/helm"
    helm_ver: v3.5.3
    repos:
      - name: prometheus-community
        url: https://prometheus-community.github.io/helm-charts
        packages: 
          - name: prometheus
      - name: pure
        url: https://purestorage.github.io/pso-csi
        packages:
          - name: pure-pso
            args: '--set clusterID=test --set orchestrator.name=openshift  --set arrays.FlashArrays[0].MgmtEndPoint=test --set arrays.FlashArrays[0].APIToken=apitok'
      - name: bitnami
        url: https://charts.bitnami.com/bitnami
        packages: 
          - name: redis
          - name: redis-cluster
          - name: harbor
          - name: postgresql
          - name: postgresql-ha
          - name: elasticsearch
          - name: metallb
          - name: grafana
          - name: fluentd
          - name: common
          - name: kafka
          - name: zookeeper
          - name: grafana-operator
      - name: ingress-nginx
        url: https://kubernetes.github.io/ingress-nginx
        packages:
          - name: ingress-nginx
      - name: elastic-search
        url: https://helm.elastic.co
        packages:
          - name: apm-server
          - name: elasticsearch
          - name: filebeat
          - name: kibana
          - name: logstash
          - name: metricbeat
      - name: gitlab
        url: https://charts.gitlab.io
        packages:
          - name: gitlab
            args: '--set certmanager-issuer.email=me@example.com'
          - name: gitlab-runner
      - name: minio
        url: https://helm.min.io/
        packages:
          - name: minio
      - name: codecentric
        url: https://codecentric.github.io/helm-charts
        packages:
          - name: keycloak
      - name: hashicorp
        url: https://helm.releases.hashicorp.com 
        packages:
          - name: vault
      - name: rancher
        url: https://releases.rancher.com/server-charts/stable
        packages:
          - name: rancher
      - name: banzai
        url: https://kubernetes-charts.banzaicloud.com
        packages:
          - name: logging-operator
      - name: argo
        url: https://argoproj.github.io/argo-helm
        packages:
          - name: argo-cd
          - name: argo-ci
          - name: argocd-notifications
          - name: argo-events
      - name: stakter
        url: https://stakater.github.io/stakater-charts
        packages:
          - name: reloader
            args: '--generate-name'
      - name: cilium
        url: https://helm.cilium.io
        packages: 
         - name: cilium
      - name: traefik
        url: https://helm.traefik.io/traefik
        packages:
          - name: traefik
      - name: grafana
        url: https://grafana.github.com/helm-charts
        packages:
          - name: grafana
          - name: fluent-bit
          - name: loki
          - name: loki-distributed
          - name: promtail
          - name: tempo
          - name: loki-stack
      - name: jetstack
        url: https://charts.jetstack.io
        packages:
          - name: cert-manager
      - name: ukto
        url: https://utkuozdemir.org/helm-charts
        packages:
         - name: transmission-openvpn
  tasks:
    - name: clear cache
      file:
        path: "{{ helm_dir }}"
        state: absent
    - name: create import dir
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - "{{ bin_dir }}"
        - "{{ helm_dir }}"
        - "{{ cache_dir}}"
        - "{{ pkg_dir}}"
    - name: create import dir
      file:
        path: "{{pkg_dir}}/{{ item.name }}"
        state: directory
        mode: 0755
      loop: "{{ repos}}"
    - name: get binary
      # get_url has selinux issues on latest fedora
      shell:
        cmd: "wget https://get.helm.sh/helm-{{helm_ver}}-linux-amd64.tar.gz"
        chdir: "{{ helm_dir}}"
    - name: extract executable
      unarchive: 
        src: "{{helm_dir}}/helm-{{helm_ver}}-linux-amd64.tar.gz"
        dest: "{{bin_dir}}"
    - name: get helm repos
      shell:
        cmd: "{{helm_exe}} repo add {{ item.name}} {{item.url}} --repository-cache {{cache_dir}}"
      loop: "{{ repos }}" 
      tags: repos
    - name: update cache
      shell:
        cmd: "{{helm_exe}} repo update --repository-cache {{cache_dir}}"
      tags: repos   
    - name: get helm packages
      shell:
        cmd: "{{helm_exe}} fetch {{ item.0.name}}/{{item.1.name }} --repository-cache {{cache_dir}}"
        chdir: "{{pkg_dir}}/{{item.0.name}}"
      loop: "{{repos|subelements('packages')}}" 
      tags: repos
    - name: find dependant images
      shell:
        cmd: "{{helm_exe }} template {{item.0.name}}/{{item.1.name}}* {{ item.1.args | default('') }} | grep -oP '(?<=image: ).*' | sort | uniq"
        chdir: "{{ pkg_dir }}"
      register: image_depends
      loop: "{{repos|subelements('packages')}}" 
      tags: repos
    - name: find more dependant images
      shell:
        cmd: |
           {{helm_exe}} show values {{item.src}} | yq -r 'flatten | .. | .registry? + "/"? + .repository? + ":"? + .tag?' | grep -v null | sort | uniq | grep -v /: | sed 's/^\///' 
      register: more_image_depends
      with_filetree: "{{pkg_dir}}"
      when: item.state == 'file'
      ignore_errors: yes
      tags: repos
    - name: collect images
      set_fact:
        images_to_mirror: "{{ (images_to_mirror | default([])) + [(item[1]| replace('\"',''))] }}"
      loop: "{{image_depends.results|subelements('stdout_lines')|unique }}"
        #    - name: collect more images
        #      set_fact:
        #        images_to_mirror: "{{ (images_to_mirror | default([])) + [(item[1]| replace('\"',''))] }}"
        #      loop: "{{ subelements('stdout_lines',more_image_depends.results,skip_missing=true)|unique }}"
    - name:
      debug:
        var: images_to_mirror
        verbosity: 0
      tags: repos

    - name: get images
      shell:
        cmd: "skopeo copy docker://{{item}} docker://{{mirror_registry}}/{{item}}"
      loop: "{{ images_to_mirror |unique }}"
      ignore_errors: yes
      tags: repos

